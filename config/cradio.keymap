// vim: filetype=dts:ts=4:sw=4:et

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define CLMK 0
#define ELAN 1
#define MEDR 2
#define NAVR 3
#define NSSL 4
#define NSL  5
#define FUNL 6

#define ZMK_COMBO(NAME, BINDING, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDING>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <50>; \
};

#define CLMK_A &hm LALT A
#define CLMK_R &hm LGUI R
#define CLMK_S &hm LSHFT S
#define CLMK_T &hm LCTRL T
#define CLMK_N &hm RCTRL N
#define CLMK_E &hm RSHFT E
#define CLMK_I &hm RGUI I
#define CLMK_O &hm LALT O

#define CLMK_SPC &lt NAVR SPACE
#define CLMK_TAB &lt MEDR TAB
#define CLMK_RET &lt NSSL RET
#define CLMK_BSPC &lt NSL BSPC

#define ELAN_R &hm LALT R
#define ELAN_S &hm LGUI S
#define ELAN_N &hm LSHFT N
#define ELAN_T &hm LCTRL T
#define ELAN_A &hm RCTRL A
#define ELAN_E &hm RSHFT E
#define ELAN_C &hm RGUI C
#define ELAN_I &hm LALT I

#define ELAN_COM &mm_comma
#define ELAN_DOT &mm_dot
#define ELAN_SPC &lt NSSL SPACE
#define ELAN_RET &lt NSL RET

&caps_word {
    // Defaults plus APOS keeps caps on for contractions
    continue-list = <UNDER APOS BSPC DEL>;
};

/ {
    #include "hd_combo_macros.dtsi"
    #include "hd_morphs.dtsi"

    behaviour {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        CLMK {
//    -------------------------------------------------------------------------
//  0 |  Q  |  W  |  F  |  P  |  B  |  4      5 |  J  |  L  |  U  |  Y  |  '  |  9
// 10 |  A  |  R  |  S  |  T  |  G  | 14     15 |  M  |  N  |  E  |  I  |  O  | 19
// 20 |  Z  |  X  |  C  |  D  |  V  | 24     25 |  K  |  H  |  ,  |  .  |  /  | 29
//                   30 |SPACE| TAB | 31     32 | RET | BSPC| 33
            bindings = <
&kp Q  &kp W  &kp F  &kp P  &kp B           &kp J  &kp L  &kp U     &kp Y   &kp APOS
CLMK_A CLMK_R CLMK_S CLMK_T &kp G           &kp M  CLMK_N CLMK_E    CLMK_I  CLMK_O
&kp Z  &kp X  &kp C  &kp D  &kp V           &kp K  &kp H  &kp COMMA &kp DOT &kp FSLH
                   CLMK_SPC CLMK_TAB     CLMK_RET CLMK_BSPC
            >;
        };

        ELAN {
            bindings = <
&kp V  &kp G  &kp H  &kp P  &kp K          &mm_slash &mm_par &mm_brc &mm_sqt &mm_dqt
ELAN_R ELAN_S ELAN_N ELAN_T &kp F          &kp J     ELAN_A  ELAN_E  ELAN_C  ELAN_I
&kp X  &kp M  &kp L  &kp D  &kp B          &mm_minus &kp U   &kp O   &kp W   &kp Y
                   ELAN_COM ELAN_DOT    ELAN_SPC ELAN_RET
            >;
        };

        MEDR {
            bindings = <
&trans &trans &trans    &trans    &trans       &trans     &trans     &trans       &trans       &trans
&trans &trans &trans    &trans    &trans       &trans     &kp K_PREV &kp K_VOL_DN &kp K_VOL_UP &kp K_NEXT
&trans &trans &tog NSSL &tog MEDR &trans       &trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
                        &trans    &trans       &kp K_MUTE &kp K_PP
            >;
        };

        NAVR {
            bindings = <
&trans &trans &trans   &trans    &trans       &kp K_REDO &kp K_PASTE &kp K_COPY &kp K_CUT &kp K_UNDO
&trans &trans &trans   &trans    &trans       &kp INS    &kp LEFT    &kp DOWN   &kp UP    &kp RIGHT
&trans &trans &tog NSL &tog NAVR &trans       &kp CAPS   &kp HOME    &kp PG_DN  &kp PG_UP &kp END
                       &trans    &trans       &kp BSPC   &kp DEL
            >;
        };

        NSSL {
            bindings = <
&mm_abrcs &kp AMPS &kp STAR  &kp NON_US_BSLH &kp RBRC       &trans &trans    &trans    &trans &trans
&kp COLON &kp DLLR &kp PRCNT &kp CARET       &kp PLUS       &trans &trans    &trans    &trans &trans
&kp TILDE &kp EXCL &kp AT    &kp HASH        &kp PIPE       &trans &tog NSSL &tog MEDR &trans &trans
                             &mm_apars       &kp RPAR       &trans &trans
            >;
        };

        NSL {
            bindings = <
&mm_abkts &kp N7 &kp N8 &kp N9 &kp RBKT        &trans &trans   &tog ELAN &trans &trans
&kp SEMI  &kp N4 &kp N5 &kp N6 &kp EQUAL       &trans &trans   &trans    &trans &trans
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp BSLH        &trans &tog NSL &tog NAVR &trans &trans
                        &kp N0 &kp MINUS       &trans &trans
            >;
        };

        FUNL {
            bindings = <
&kp F12 &kp F7 &kp F8 &kp F9    &kp PSCRN             &trans &trans &trans &trans &trans
&kp F11 &kp F4 &kp F5 &kp F6    &kp SLCK              &trans &trans &trans &trans &trans
&kp F10 &kp F1 &kp F2 &kp F3    &kp PAUSE_BREAK       &trans &trans &trans &trans &trans
                      &kp K_APP &trans                &trans &trans
            >;
        };

    };

    combos {
        compatible = "zmk,combos";

        ZMK_COMBO(esc, &kp ESC, 30 31, CLMK ELAN)
        // ZMK_COMBO(minus, &kp MINUS, 30 31, NSL)
        ZMK_COMBO(under, &kp UNDER, 30 31, NSSL)

        ZMK_COMBO(caps, &caps_word, 12 17, CLMK ELAN)
        ZMK_COMBO(boot, &bootloader, 0 4 20 24, CLMK ELAN)

        // ZMK_COMBO(im, &m_im, 18 15, CLMK) // IM -> "I'm "
        // ZMK_COMBO(id, &m_id, 18 23, CLMK) // ID -> "I'd "
        // ZMK_COMBO(ill, &m_ill, 18 6, CLMK) // IL -> "I'll "
        // ZMK_COMBO(ive, &m_ive, 18 24, CLMK) // IV -> "I've "
        // ZMK_COMBO(wed, &m_wed, 1 23, CLMK) // WD -> "we'd "
        // ZMK_COMBO(well, &m_well, 1 6, CLMK) // WL -> "we'll "
        // ZMK_COMBO(weve, &m_weve, 1 24, CLMK) // WV -> "we've "
        // ZMK_COMBO(were, &m_were, 1 11, CLMK) // WR -> "we're "
        // ZMK_COMBO(youd, &m_youd, 8 23, CLMK) // YD -> "you'd "
        // ZMK_COMBO(youll, &m_youll, 8 6, CLMK) // YL -> "you'll "
        // ZMK_COMBO(youve, &m_youve, 8 24, CLMK) // YV -> "you've "
        // ZMK_COMBO(youre, &m_youre, 8 11, CLMK) // YR -> "you're "
        // ZMK_COMBO(they, &m_they, 13 8, CLMK) // TY -> "they "
        // ZMK_COMBO(their, &m_their, 13 18, CLMK) // TI -> "their "
        // ZMK_COMBO(theyd, &m_theyd, 13 23, CLMK) // TD -> "they'd "
        // ZMK_COMBO(theyll, &m_theyll, 13 6, CLMK) // TL -> "they'll "
        // ZMK_COMBO(theyve, &m_theyve, 13 24, CLMK) // TV -> "they've "
        // ZMK_COMBO(theyre, &m_theyre, 13 11, CLMK) // TR -> "they're "
        // ZMK_COMBO(there, &m_there, 13 17, CLMK) // TE -> "there "
        // ZMK_COMBO(where, &m_where, 1 17, CLMK) // WE -> "where "
        // ZMK_COMBO(here, &m_here, 26 17, CLMK) // HE -> "here "

        ZMK_COMBO(vg, &kp Z, 0 1, ELAN) // VG -> Z
        ZMK_COMBO(pk, &kp Q, 3 4, ELAN) // PK -> Q
        ZMK_COMBO(yu, &kp Q, 26 29, ELAN) // YU -> Q
        ZMK_COMBO(yw, &kp J, 28 29, ELAN) // YW -> J
    };
};
