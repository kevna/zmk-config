// vim: filetype=dts:ts=4:sw=4:et

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DFLT 0
#define MEDR 1
#define NAVR 2
#define NSSL 3
#define NSL  4
#define FUNL 5

#define ZMK_COMBO(NAME, BINDING, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDING>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <50>; \
};

&caps_word {
    // Defaults plus APOS keeps caps on for contractions
    continue-list = <UNDER APOS BSPC DEL>;
};

/ {
    #include "hd_combo_macros.dtsi"

    behaviour {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DFLT {
//    -------------------------------------------------------------------------
//  0 |  Q  |  W  |  F  |  P  |  B  |  4      5 |  J  |  L  |  U  |  Y  |  '  |  9
// 10 |  A  |  R  |  S  |  T  |  G  | 14     15 |  M  |  N  |  E  |  I  |  O  | 19
// 20 |  Z  |  X  |  C  |  D  |  V  | 24     25 |  K  |  H  |  ,  |  .  |  /  | 29
//                   30 |SPACE| TAB | 31     32 | RET | BSPC| 33
            bindings = <
&kp Q      &kp W      &kp F       &kp P       &kp B           &kp J  &kp L       &kp U       &kp Y       &kp APOS
&hm LALT A &hm LGUI R &hm LSHFT S &hm LCTRL T &kp G           &kp M  &hm RCTRL N &hm RSHFT E &hm RGUI I  &hm LALT O
&kp Z      &kp X      &kp C       &kp D       &kp V           &kp K  &kp H       &kp COMMA   &kp DOT     &kp FSLH
                           &lt NAVR SPACE &lt MEDR TAB     &lt NSSL RET  &lt NSL BSPC
            >;
        };

        MEDR {
            bindings = <
&trans &trans &trans    &trans    &trans       &trans     &trans     &trans       &trans       &trans
&trans &trans &trans    &trans    &trans       &trans     &kp K_PREV &kp K_VOL_DN &kp K_VOL_UP &kp K_NEXT
&trans &trans &tog NSSL &tog MEDR &trans       &trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
                        &trans    &trans       &kp K_MUTE &kp K_PP
            >;
        };

        NAVR {
            bindings = <
&trans &trans &trans   &trans    &trans       &kp K_REDO &kp K_PASTE &kp K_COPY &kp K_CUT &kp K_UNDO
&trans &trans &trans   &trans    &trans       &kp INS    &kp LEFT    &kp DOWN   &kp UP    &kp RIGHT
&trans &trans &tog NSL &tog NAVR &trans       &kp CAPS   &kp HOME    &kp PG_DN  &kp PG_UP &kp END
                       &trans    &trans       &trans     &trans
            >;
        };

        NSSL {
            bindings = <
&kp LBRC  &kp AMPS &kp STAR  &kp NON_US_BSLH &kp RBRC       &trans &trans    &trans    &trans &trans
&kp COLON &kp DLLR &kp PRCNT &kp CARET       &kp PLUS       &trans &trans    &trans    &trans &trans
&kp TILDE &kp EXCL &kp AT    &kp HASH        &kp PIPE       &trans &tog NSSL &tog MEDR &trans &trans
                             &kp LPAR        &kp RPAR       &trans &trans
            >;
        };

        NSL {
            bindings = <
&kp LBKT  &kp N7 &kp N8 &kp N9 &kp RBKT        &trans &trans   &trans    &trans &trans
&kp SEMI  &kp N4 &kp N5 &kp N6 &kp EQUAL       &trans &trans   &trans    &trans &trans
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp BSLH        &trans &tog NSL &tog NAVR &trans &trans
                        &kp N0 &kp MINUS       &trans &trans
            >;
        };

        FUNL {
            bindings = <
&kp F12 &kp F7 &kp F8 &kp F9    &kp PSCRN             &trans &trans &trans &trans &trans
&kp F11 &kp F4 &kp F5 &kp F6    &kp SLCK              &trans &trans &trans &trans &trans
&kp F10 &kp F1 &kp F2 &kp F3    &kp PAUSE_BREAK       &trans &trans &trans &trans &trans
                      &kp K_APP &trans                &trans &trans
            >;
        };

    };

    combos {
        compatible = "zmk,combos";

        ZMK_COMBO(esc, &kp ESC, 30 31, DFLT)
        // ZMK_COMBO(minus, &kp MINUS, 30 31, NSL)
        ZMK_COMBO(under, &kp UNDER, 30 31, NSSL)

        ZMK_COMBO(caps, &caps_word, 12 17, DFLT)

        ZMK_COMBO(im, &m_im, 18 15, DFLT) // "I'm "
        ZMK_COMBO(id, &m_id, 18 23, DFLT) // "I'd "
        ZMK_COMBO(ill, &m_ill, 18 6, DFLT) // "I'll "
        ZMK_COMBO(ive, &m_ive, 18 24, DFLT) // "I've "
        ZMK_COMBO(wed, &m_wed, 1 23, DFLT) // "we'd "
        ZMK_COMBO(well, &m_well, 1 6, DFLT) // "we'll "
        ZMK_COMBO(weve, &m_weve, 1 24, DFLT) // "we've "
        ZMK_COMBO(were, &m_were, 1 11, DFLT) // "we're "
        ZMK_COMBO(youd, &m_youd, 8 23, DFLT) // "you'd "
        ZMK_COMBO(youll, &m_youll, 8 6, DFLT) // "you'll "
        ZMK_COMBO(youve, &m_youve, 8 24, DFLT) // "you've "
        ZMK_COMBO(youre, &m_youre, 8 11, DFLT) // "you're "
    };
};
