#define L_QU &qu Q &m_qu
#define L_LPAR &par &m_par LPAR
#define L_LBKT &bkt &m_bkt LBKT
#define L_LBRC &brc &m_brc LBRC
#define L_LT &less &m_lt LT

behaviour {
  qu: qu {
    compatible = "zmk,behavior-hold-tap";
    label = "qu";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&m_qu>;
    hold-trigger-key-positions = <>;
  };
  par: par {
    compatible = "zmk,behavior-hold-tap";
    label = "parentheses";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&m_par>, <&kp>;
    hold-trigger-key-positions = <>;
  };
  bkt: bkt {
    compatible = "zmk,behavior-hold-tap";
    label = "square_brackets";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&m_bkt>, <&kp>;
    hold-trigger-key-positions = <>;
  };
  brc: brc {
    compatible = "zmk,behavior-hold-tap";
    label = "braces";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&m_brc>, <&kp>;
    hold-trigger-key-positions = <>;
  };
  less: less {
    compatible = "zmk,behavior-hold-tap";
    label = "triangular_brackets";
    #binding-cells = <2>;
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
    bindings = <&m_lt>, <&kp>;
    hold-trigger-key-positions = <>;
  };


  mm_lbkt: mm_lbkt {
    compatible = "zmk,behavior-mod-morph";
    label = "mm_lbkt";
    #binding-cells = <0>;
    bindings = <L_LBKT>, <L_LBRC>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  mm_comma: mm_comma {
    compatible = "zmk,behavior-mod-morph";
    label = "mm_comma";
    #binding-cells = <0>;
    bindings = <&kp COMMA>, <L_LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  mm_dot: mm_dot {
    compatible = "zmk,behavior-mod-morph";
    label = "mm_dot";
    #binding-cells = <0>;
    bindings = <&kp DOT>, <&less &m_lt GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
};
macros {
  ZMK_MACRO(m_qu,
    tap-ms = <10>;
    wait-ms = <10>;
    bindings = <&kp Q>
    , <&macro_release  &kp LSHFT  &kp RSHFT>
    , <&macro_tap  &kp U>;
  )
  ZMK_MACRO(m_par,
    tap-ms = <10>;
    wait-ms = <10>;
    bindings = <&kp LPAR  &kp RPAR  &kp LEFT>;
  )
  ZMK_MACRO(m_bkt,
    tap-ms = <10>;
    wait-ms = <10>;
    bindings = <&kp LBKT  &kp RBKT  &kp LEFT>;
  )
  ZMK_MACRO(m_brc,
    tap-ms = <10>;
    wait-ms = <10>;
    bindings = <&kp LBRC  &kp RBRC>
    , <&macro_release  &kp LSHFT  &kp RSHFT>
    , <&macro_tap  &kp LEFT>;
  )
  ZMK_MACRO(m_lt,
    tap-ms = <10>;
    wait-ms = <10>;
    bindings = <&kp LT  &kp GT>
    , <&macro_release  &kp LSHFT  &kp RSHFT>
    , <&macro_tap  &kp LEFT>;
  )
};
